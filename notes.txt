install the dependencies by running from the root directoy of the project:
'npm install'
build the project by running from the root directory of the project
'npm build' or if you want the page to be refreshed when you make changes to the code 'npm build:watch'
if you are running in debug mode, in assets/views/homepage.ejs, change the reference to 'reactbunle.min.js' to 'reactbundle.js'

if you wish to work on the backend, instead of using the remote genenetwork backend, go into domain.js and change the domain to
''
this may change some behaviour, for example the max size of a GET request is probably larger on the remote server than on your localhost

start up the redis server:
'redis-server' or 'brew services start redis' or any other way you may have installed it
start up the elastic search server:
'/usr/local/Cellar/elasticsearch\@2.4/2.4.6/bin/elasticsearch' or 'brew services start elasticsearch@2.4' or any other way you may have installed it
start up the prediction server:
cd to servers/PredictionServer/
'node PredictionServer.js' from the root directory of the project
load the pwa server in memory:
cd to servers/PWAServer/
'node --max-old-space-size=8192 PWAServerInMem.js' from the root directory of the project

start the application by running from the root directory:
'npm start'
you should now be able to see the page at localhost:80 in your browser

if you get grunt errors when doing 'npm start' and see 404s on some of the resources on the homepage, your grunt version may be too new. run:
'npm i natives'
then redo the build and run

build a new minified reactbundle with "node_modules/browserify/bin/cmd.js -t reactify -t es6-templates -o assets/js/ReactBundle.js assets/jsx/GeneNetwork.js && node_modules/uglify-js/bin/uglifyjs --compress --mangle -- assets/js/ReactBundle.js > assets/js/ReactBundle.min.js" in the root directory of the project

run the project with docker-compose, by modifying the properties files for the servers and the web, and using the regular compose commands (build and up)
In the docker-compose.yml configuration file every service is set to: restart: always. This wil automatically start the service after a crash or server reboot.

To start the docker daemon on start-up in centOS run:
sudo systemctl enable docker.service
sudo systemctl enable containerd.service


